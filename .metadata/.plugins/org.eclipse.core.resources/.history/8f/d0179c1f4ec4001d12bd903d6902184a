package com.ojas.socket;

import java.io.*;
import java.net.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ServerThreadpool {
    private static ExecutorService threadPool = Executors.newFixedThreadPool(10);

    public static void main(String[] args) {
        try {
            // create a server socket object and start listening for client connections
            ServerSocket serverSocket = new ServerSocket(8383);
            int counter=0;
            System.out.println("Server started on port 8383...");
//            while (true) {
//           	 counter++;
//               // accept a new client connection
//               Socket clientSocket = serverSocket.accept();
//              // System.out.println("Accepted new client connection...");
//               System.out.println(" >> "+"Client No:"+ counter + "started!");
//               // add the client socket and output stream to the lists
//               clientSockets.add(clientSocket);
//               clientOutputStreams.add(clientSocket.getOutputStream());
//
//               // create a new thread to handle the client connection
//               //Thread clientThread = new Thread(new ClientHandler(clientSocket));
//               ServerClientThread sct=new ServerClientThread(clientSocket,counter);
//               sct.start();
//           }

            while (true) {
            	 counter++;
                // accept a new client connection
                Socket clientSocket = serverSocket.accept();
                System.out.println("Accepted new client connection...");
                System.out.println(" >> "+"Client No:"+ counter + "started!");
                // submit a new task to the thread pool to handle the client connection
                threadPool.submit(new ServerClientThread(clientSocket,counter));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

//    private static void sendResponse(String response, OutputStream outputStream) throws IOException {
//        outputStream.write(response.getBytes());
//        outputStream.flush();
//    }

    private static class ClientHandler implements Runnable {
        private Socket clientSocket;
        private InputStream inputStream;
        private OutputStream outputStream;

        public ClientHandler(Socket clientSocket) {
            this.clientSocket = clientSocket;
        }

        @Override
        public void run() {
            try {
                // create input and output streams for the client socket
                inputStream = clientSocket.getInputStream();
                outputStream = clientSocket.getOutputStream();

                // read requests from the client and send responses back
                while (true) {
                    // read a request from the client
                    byte[] buffer = new byte[1024];
                    int bytesRead = inputStream.read(buffer);
                    String request = new String(buffer, 0, bytesRead);
                    System.out.println("Received request from client: " + request);

                    // send a response back to the client
                    String response = "Hello, client!";
                    sendResponse(response, outputStream);
                    System.out.println("Sent response to client: " + response);
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                // close the client socket
                try {
                    clientSocket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
