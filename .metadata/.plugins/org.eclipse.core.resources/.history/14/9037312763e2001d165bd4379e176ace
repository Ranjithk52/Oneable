package com.ojas.spring.git;

import org.eclipse.egit.github.core.PullRequest;
import org.eclipse.egit.github.core.Repository;
import org.eclipse.egit.github.core.RepositoryId;
import org.eclipse.egit.github.core.service.PullRequestService;
import org.eclipse.egit.github.core.service.RepositoryService;
import org.kohsuke.github.GHPullRequestReviewComment;

import static org.eclipse.egit.github.core.client.IGitHubConstants.*;


import java.io.IOException;
import java.util.List;
public class GitReview {

    private static final String USER_NAME = "your-username";
    private static final String PASSWORD = "your-password";
    private static final String REPO_OWNER = "repository-owner";
    private static final String REPO_NAME = "repository-name";
    private static final int PULL_REQUEST_NUMBER = 1234;

    public static void main(String[] args) throws IOException {
        // Create a repository service
        RepositoryService repoService = new RepositoryService();
        repoService.getClient().setCredentials(USER_NAME, PASSWORD);

        // Get the repository by owner and name
        RepositoryId repoId = new RepositoryId(REPO_OWNER, REPO_NAME);
        Repository repo = repoService.getRepository(repoId);

        // Create a pull request service
        PullRequestService prService = new PullRequestService();
        prService.getClient().setCredentials(USER_NAME, PASSWORD);

        // Get the pull request by number
        PullRequest pr = prService.getPullRequest(repo, PULL_REQUEST_NUMBER);

        // Get the comments on the pull request
        List<GHPullRequestReviewComment> comments = prService.getComments(repo, PULL_REQUEST_NUMBER);

        // Print the comments
        for (ReviewComment comment : comments) {
            System.out.println(comment.getBody());
        }
    }
}




//public class GitReview {
//    public static void main(String[] args) throws Exception {
//        String token = "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";
//        GitHub github = new GitHubBuilder().withOAuthToken(token).build();
//        GHRepository repo = github.getRepository("Ranjithk52/Practice");
//        GHPullRequest pr = repo.getPullRequest(1);
//
//        for (GHPullRequestReview review : pr.listReviews()) {
//            for (GHPullRequestReviewComment comment : review.listReviewComments()) {
//                System.out.println(comment.getUser().getLogin() + ": " + comment.getBody());
//            }
//        }
//    }
//}
