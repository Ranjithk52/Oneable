package com.ojas.spring.controller;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.Base64;
import java.util.List;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

//import javax.mail.internet.MimeUtility;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.reflect.TypeToken;

import com.ojas.spring.model.Branches;
import com.ojas.spring.model.FileContent;
import com.ojas.spring.model.GitIntegration;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

@RestController
@RequestMapping("/gitcontent")
public class GitContent {
	
	private static final String GitHub_Api_BASEURL = "https://api.github.com/";
	 @PostMapping("/getcode")
	private static String getGitContent(@RequestBody GitIntegration gitIntegration) throws IOException {
	    String user = gitIntegration.getUser();
        String repo = gitIntegration.getRepo();
        String path = gitIntegration.getPath();

        String accessToken =gitIntegration.getAccessToken();
        OkHttpClient client = new OkHttpClient();


        String url=GitHub_Api_BASEURL+"repos/"+user+"/"+repo+"/contents/"+path;
		Request request=new Request.Builder()
		.url(url)
		.header("Authorization", "Bearer"+accessToken)
		.build();

        Response response = client.newCall(request).execute();
        System.out.println(response+"   response");
        if (response.isSuccessful()) {
            String responseData = response.body().string();
            System.out.println(responseData+"   responsedata ");
            Gson gson = new Gson();
            FileContent fileContent = gson.fromJson(responseData, FileContent.class);
            System.out.println(fileContent+"    file content  ");
            String fileContentEncoded = fileContent.getContent().replaceAll("[^A-Za-z0-9+/=]", "");
          System.out.println(fileContentEncoded+"   file content encoded  ");
          // Decode the Base64 string
          byte[] decodedBytes = Base64.getDecoder().decode(fileContentEncoded);
          
             String fileContentDecoded = new String(decodedBytes);
           // System.out.println("File Content:\n" + fileContentDecoded);
            
         
            // process the file content as needed
            return fileContentDecoded;
        } else {
            System.out.println("Error: " + response.code() + " - " + response.message());
            return "Error: " + response.code() + " - " + response.message();
        }
		
	}
	 
	 
	 @PostMapping("/nooflines")
	 private static int getNoOfLines(@RequestBody GitIntegration gitIntegration)  throws IOException {
		    String user = gitIntegration.getUser();
	        String repo = gitIntegration.getRepo();
	        String path = gitIntegration.getPath();

	        String accessToken =gitIntegration.getAccessToken();
	        OkHttpClient client = new OkHttpClient();
     
	        String url=GitHub_Api_BASEURL+"repos/"+user+"/"+repo+"/contents/"+path;
			Request request=new Request.Builder()
			.url(url)
			.header("Authorization", "Bearer"+accessToken)
			.build();

	        Response response = client.newCall(request).execute();
	       
	         if (response.isSuccessful()) {
	            String responseData = response.body().string();
	            System.out.println(responseData+" Helloo responsedata  ");
	            Gson gson = new Gson();
	            FileContent fileContent = gson.fromJson(responseData, FileContent.class);
	           System.out.println(fileContent+"   filecontent ");
	            String  fileContentEncoded = fileContent.getContent().replaceAll("[^A-Za-z0-9+/=]", "");
	          System.out.println(fileContentEncoded+"  filecontent encoded");
	          // Decode the Base64 string
	          byte[] decodedBytes = Base64.getDecoder().decode(fileContentEncoded);
	         
	            
	            String fileContentDecoded = new String(decodedBytes);
	            System.out.println("File Content:\n" + fileContentDecoded);
	            String[] lines = fileContentDecoded.split("\r?\n");

	         // Print number of lines
	         System.out.println("Number of lines: " + lines.length);
	         
	            // process the file content as needed
	            return lines.length;
	        } else {
	            System.out.println("Error: " + response.code() + " - " + response.message());
	            return response.code();
	        }
		 
			
			
			
			
		}
	
	 
	 @PostMapping("/branches") 
	 public List<Branches> getBranchCount(@RequestBody GitIntegration gitIntegration) throws IOException { 
		 String user = gitIntegration.getUser();
	        String repo = gitIntegration.getRepo();
	       
		 String accessToken = gitIntegration.getAccessToken(); 
		 OkHttpClient client = new OkHttpClient(); 
		 List<Branches> branches=null; 
		 String url = GitHub_Api_BASEURL + "repos/" + user + "/" + repo + "/branches"; 
		 Request request = new Request.Builder() 
				 .url(url) 
				 .header("Authorization", "token " + accessToken) 
				 .build(); 
		 Response response = client.newCall(request).execute(); 
		 System.out.println(response+" hello");
		
		 if (response.isSuccessful()) { 
	    String responseData = response.body().string(); 
	    System.out.println(responseData+" data");
		 Gson gson = new Gson(); 
		 Type type = new TypeToken<List<Branches>>() { }.getType(); 
		 branches = gson.fromJson(responseData, type); 
		 System.out.println(branches);
	
		 
	 
	 }
		return branches;
		 }
	 
	 

	@PostMapping("/commits") 
	public int getTotalChanges(@RequestBody GitIntegration integration) throws IOException { 
		
		 String user = integration.getUser();
	        String repo =integration.getRepo();
		String accessToken = integration.getAccessToken();
		// Create an OkHttpClient instance to make HTTP requests 
		OkHttpClient client = new OkHttpClient(); 
		// Construct the URL for the Git API endpoint that returns the repository's // commits 
		String url = GitHub_Api_BASEURL + "repos/" + user + "/" + repo + "/commits"; 
		// Construct an HTTP request to get the repository's commits 
		Request request = new Request.Builder()
						.url(url)
						.header("Authorization", "token " + accessToken)
						.build(); 
		// Execute the HTTP request and get the response 
		Response response = client.newCall(request).execute(); 
		// If the response was successful, deserialize the JSON response into a list of // GitCommit objects 
		if (response.isSuccessful()) { 
			
			String responseData = response.body().string(); 
		JsonArray jsonArray = JsonParser.parseString(responseData).getAsJsonArray(); 
		for(JsonElement j:jsonArray) { 
		JsonObject jsonObject = j.getAsJsonObject();
		String message = jsonObject.get("commit").getAsJsonObject().get("message").getAsString();
			System.out.println(message);
			
			} 
		//System.out.println(jsonArray); 
		
		return jsonArray.size(); 
		} else { 
			return 0; 
			} 
		}
	
	@PostMapping("/reviewcomments") 
	   public String getCodeReviewComments(@RequestBody GitIntegration integration) throws IOException{

			 String user = integration.getUser();
		        String repo =integration.getRepo();
			String accessToken = integration.getAccessToken();
			OkHttpClient client = new OkHttpClient();
			List<JsonArray> js=null;
			 String url = GitHub_Api_BASEURL + "repos/" + user + "/" + repo + "/issues/comments"; 
			 Request request = new Request.Builder() 
					 .url(url) 
					 .header("Authorization", "token " + accessToken) 
					 .build(); 
			
			 Response response = client.newCall(request).execute(); 
			 //System.out.println(response);
			 String message="";
			 if (response.isSuccessful()) { 
		    String responseData = response.body().string(); 
		    JsonArray jsonArray = JsonParser.parseString(responseData).getAsJsonArray(); 
 		for(JsonElement j:jsonArray) { 
 		JsonObject jsonObject = j.getAsJsonObject();
 		message = jsonObject.getAsJsonObject().get("body").getAsString();
 			System.out.println(message);
 			
					} 
		    return message;
	 }else {
      System.out.println("Error: " + response.code() + " - " + response.message());
      return null;
  }

	   }
	
		}
	

	
		
		
		
		


	


