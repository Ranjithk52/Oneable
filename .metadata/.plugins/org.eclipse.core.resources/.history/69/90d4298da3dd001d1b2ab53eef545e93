package com.ojas.spring.controller;

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.Ref;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.eclipse.jgit.treewalk.CanonicalTreeParser;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ojas.spring.model.GitIntegration;

import java.io.File;
import java.io.IOException;
@RestController
@RequestMapping("/gitchanges")
public class GitChangesCounter {
	@PostMapping("/count")
    public static int getNumberOfChanges(@RequestBody GitIntegration gitIntegration) throws IOException, GitAPIException {
        try (Repository repository = new FileRepositoryBuilder().setGitDir(new File(".git")).build()) {
        	String remoteRepoUrl=gitIntegration.getRemoteRepoUrl();
        			String branchName=gitIntegration.getBranchName();
            Git git = new Git(repository);

            // Fetch the remote repository
            git.fetch()
                .setRemote(remoteRepoUrl)
                .setRefSpecs("refs/heads/" + branchName + ":refs/remotes/origin/" + branchName)
                .call();

            // Get the commit IDs for the branch in question
            Ref ref = repository.findRef("refs/remotes/origin/" + branchName);
            ObjectId oldHead = ref.getObjectId();
            ObjectId newHead = repository.resolve("HEAD");

            // Count the number of changes
            // Count the number of changes
            CanonicalTreeParser oldTreeIter = new CanonicalTreeParser();
            oldTreeIter.reset(git.getRepository().newObjectReader(), oldHead);
            CanonicalTreeParser newTreeIter = new CanonicalTreeParser();
            newTreeIter.reset(git.getRepository().newObjectReader(), newHead);
            int numberOfChanges = git.diff()
                .setOldTree(oldTreeIter)
                .setNewTree(newTreeIter)
                .call()
                .size();

            return numberOfChanges;
        }
    }
}
