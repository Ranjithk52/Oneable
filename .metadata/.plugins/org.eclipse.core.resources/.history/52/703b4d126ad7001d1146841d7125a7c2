package com.ojas.spring.git;

import java.io.File;
import java.io.IOException;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.lib.ObjectReader;
import org.eclipse.jgit.lib.TextProgressMonitor;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevWalk;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
import org.eclipse.jgit.treewalk.CanonicalTreeParser;

public class GitChangesCounter {

  public static void main(String[] args) throws IOException, GitAPIException {
    // Replace this with the path to your Git repository
    //String repoPath = "Ranjithk52/Practice";
    
    // Replace these with your GitHub credentials
    String repoUrl = "https://github.com/Ranjithk52/Practice/blob/master/src/main/java/com/ojas1/Calculate.java";
    String username = "Ranjithk52";
    String accessToken = "y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";

    
  

    try (Git git = Git.cloneRepository()
        .setCredentialsProvider(new UsernamePasswordCredentialsProvider(username, accessToken))
        .setProgressMonitor(new TextProgressMonitor())
        .setURI(repoUrl)
        .setDirectory(new File("local/repo/path"))
        .call()) {
      // Get the latest commit
      RevWalk walk = new RevWalk(git.getRepository());
      RevCommit latestCommit = walk.parseCommit(git.getRepository().resolve("HEAD"));

      // Get the commit before the latest one
      RevCommit previousCommit = walk.parseCommit(latestCommit.getParent(0).getId());

      // Get the count of changes between the latest and previous commit
      ObjectReader reader = git.getRepository().newObjectReader();
      CanonicalTreeParser oldTreeIter = new CanonicalTreeParser();
      oldTreeIter.reset(reader, previousCommit.getTree().getId());
      CanonicalTreeParser newTreeIter = new CanonicalTreeParser();
      newTreeIter.reset(reader, latestCommit.getTree().getId());
      int changesCount = git.diff()
          .setOldTree(oldTreeIter)
          .setNewTree(newTreeIter)
          .call()
          .size();

      System.err.println("Number of changes made in the latest commit: " + changesCount);
    }
  }
}
//import org.eclipse.jgit.api.errors.GitAPIException;
//import org.eclipse.jgit.lib.Ref;
//import org.eclipse.jgit.lib.Repository;
//import org.eclipse.jgit.revwalk.RevCommit;
//import org.eclipse.jgit.revwalk.RevWalk;
//import org.eclipse.jgit.transport.CredentialsProvider;
//import org.eclipse.jgit.transport.Transport;
//import org.eclipse.jgit.transport.TransportConfigCallback;
//import org.eclipse.jgit.transport.URIish;
//import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
//import java.io.IOException;
//import java.net.URISyntaxException;
//
//public class GitChangesCounter {
//
//    public static void main(String[] args) throws IOException, GitAPIException, URISyntaxException {
//        // The URL of the remote Git repository
//        String repoUrl = "https://github.com/username/repo.git";
//        // Your GitHub username
//        String gitHubUsername = "username";
//        // Your GitHub personal access token
//        String gitHubAccessToken = "access-token";
//        // The name of the branch you want to count changes for
//        String branchName = "branch-name";
//
//        CredentialsProvider credentialsProvider = new UsernamePasswordCredentialsProvider(gitHubUsername, gitHubAccessToken);
//
//        TransportConfigCallback transportConfigCallback = transport -> {
//            if (transport instanceof org.eclipse.jgit.transport.HttpTransport) {
//                ((org.eclipse.jgit.transport.HttpTransport) transport).setCredentialsProvider(credentialsProvider);
//            }
//        };
//
//        try (Transport transport = Transport.open(new URIish(repoUrl), transportConfigCallback)) {
//            Repository repo = transport.openRepository(null);
//
//            Ref branchRef = repo.getRef("refs/heads/" + branchName);
//            RevWalk walk = new RevWalk(repo);
//
//            Iterable<RevCommit> commits = walk.parseCommit(branchRef.getObjectId()).getParents();
//
//            int numChanges = 0;
//            for (RevCommit commit : commits) {
//                numChanges += commit.getFooterLines("Changed").size();
//            }
//
//            System.out.println("Number of changes in branch " + branchName + ": " + numChanges);
//        }
//    }
//}
//
