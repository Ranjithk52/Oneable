package com.ojas.spring.git;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.Base64;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import javax.mail.internet.MimeUtility;

import org.springframework.web.bind.annotation.RequestBody;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.reflect.TypeToken;
import com.ojas.spring.model.Branches;
import com.ojas.spring.model.FileContent;
import com.ojas.spring.model.GitIntegration;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

public class GitApiClientExample {
	static String GitHub_Api_BASEURL = "https://api.github.com/";

	static String user = "Ranjithk52";
	static String repo = "Practice";
	static String path = "src/main/java/com/ojas1/Calculate.java";
	static String branch = "";
	static String accessToken = "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";

	public static void main(String[] args) throws IOException {
		// System.out.println(getGitContent());
		// System.out.println(getNoOfLines());
		// System.out.println(getBranchCount());
		// System.out.println(getTotalChanges());
		getReviewComments();
	}

	static OkHttpClient client = new OkHttpClient();

	private static String getGitContent() throws IOException {

		String url = GitHub_Api_BASEURL + "repos/" + user + "/" + repo + "/contents/" + path;
		Request request = new Request.Builder().url(url).header("Authorization", "Bearer" + accessToken).build();

		Response response = client.newCall(request).execute();

		if (response.isSuccessful()) {
			String responseData = response.body().string();
			System.out.println(responseData);
			Gson gson = new Gson();
			FileContent fileContent = gson.fromJson(responseData, FileContent.class);

			System.out.println(fileContent + "   filecontent ");
			String fileContentEncoded = fileContent.getContent().replaceAll("[^A-Za-z0-9+/=]", "");
			System.out.println(fileContentEncoded + "  filecontent encoded");
			// Decode the Base64 string
			byte[] decodedBytes = Base64.getDecoder().decode(fileContentEncoded);
			String fileContentDecoded = new String(decodedBytes);
			// System.out.println("File Content:\n" + fileContentDecoded);

			return fileContentDecoded;
		} else {
			// System.out.println("Error: " + response.code() + " - " + response.message());
			return "Error: " + response.code() + " - " + response.message();
		}
	}

	private static int getNoOfLines() throws IOException {
		String url = GitHub_Api_BASEURL + "repos/" + user + "/" + repo + "/contents/" + path;
		Request request = new Request.Builder().url(url).header("Authorization", "Bearer" + accessToken).build();

		Response response = client.newCall(request).execute();

		if (response.isSuccessful()) {
			String responseData = response.body().string();
			// System.out.println(responseData);
			Gson gson = new Gson();
			FileContent fileContent = gson.fromJson(responseData, FileContent.class);
			// System.out.println(fileContent+" filecontent ");
			String fileContentEncoded = fileContent.getContent().replaceAll("[^A-Za-z0-9+/=]", "");
			// System.out.println(fileContentEncoded+" filecontent encoded");
			// Decode the Base64 string
			byte[] decodedBytes = Base64.getDecoder().decode(fileContentEncoded);

			String fileContentDecoded = new String(decodedBytes);
			// System.out.println("File Content:\n" + fileContentDecoded);
			String[] lines = fileContentDecoded.split("\r?\n");

			// Print number of lines
			// System.out.println("Number of lines: " + lines.length);

			// process the file content as needed
			return lines.length;
		} else {
			// System.out.println("Error: " + response.code() + " - " + response.message());
			return response.code();
		}

	}

	public static List<Branches> getBranchCount() throws IOException {

		OkHttpClient client = new OkHttpClient();
		List<Branches> branches = null;
		String url = GitHub_Api_BASEURL + "repos/" + user + "/" + repo + "/branches";
		Request request = new Request.Builder().url(url).header("Authorization", "token " + accessToken).build();
		Response response = client.newCall(request).execute();
		System.out.println(response + " hello");

		if (response.isSuccessful()) {
			String responseData = response.body().string();
			System.out.println(responseData + " data");
			Gson gson = new Gson();
			Type type = new TypeToken<List<Branches>>() {
			}.getType();
			branches = gson.fromJson(responseData, type);
			System.out.println(branches.size());

//		for(Branches br:branches) {
//			System.out.println(br.getName());
//		}

		}
		// return branches.stream().map(br->br.getName()).collect(Collectors.toList());
		return branches;
	}

	public static int getTotalChanges() throws IOException {

		// Construct the URL for the Git API endpoint that returns the repository's //
		// commits
		String url = GitHub_Api_BASEURL + "repos/" + user + "/" + repo + "/commits";
		// Construct an HTTP request to get the repository's commits
		Request request = new Request.Builder().url(url).header("Authorization", "token " + accessToken).build();
		// Execute the HTTP request and get the response
		Response response = client.newCall(request).execute();
		System.out.println(response);
		// If the response was successful, deserialize the JSON response into a list of
		// // GitCommit objects
		if (response.isSuccessful()) {
			String responseData = response.body().string();
			JsonArray jsonArray = JsonParser.parseString(responseData).getAsJsonArray();
			for (JsonElement j : jsonArray) {
				JsonObject jsonObject = j.getAsJsonObject();
				String message = jsonObject.get("commit").getAsJsonObject().get("message").getAsString();
				System.out.println(message);
			}
			System.out.println(jsonArray);
			return jsonArray.size();
		} else {
			return 0;
		}
	}

	public static void getReviewComments() throws IOException {
		OkHttpClient client = new OkHttpClient();
		List<Branches> branches = null;
		String url = GitHub_Api_BASEURL + "repos/" + user + "/" + repo + "/issues/comments";
		Request request = new Request.Builder().url(url).header("Authorization", "token " + accessToken).build();
		Response response = client.newCall(request).execute();
		//System.out.println(response);

		if (response.isSuccessful()) {
			String responseData = response.body().string();
			//System.out.println(responseData);
			JsonArray jsonArray = JsonParser.parseString(responseData).getAsJsonArray();
			for (JsonElement j : jsonArray) {
				JsonObject jsonObject = j.getAsJsonObject();
				String message = jsonObject.getAsJsonObject().get("body").getAsString();
				System.out.println(message);

			}

		} else {
			System.out.println("Error: " + response.code() + " - " + response.message());

		}

	}

}
